--CREATE DATABASE Zoo
--    GO
--   USE Zoo

--01. DLL 
--CREATE TABLE Owners
--(
--Id INT PRIMARY KEY IDENTITY,
--[Name] VARCHAR(50) NOT NULL,
--PhoneNumber VARCHAR(15) NOT NULL,
--[Address] VARCHAR(50)
--)
--
--CREATE TABLE AnimalTypes
--(
--Id INT PRIMARY KEY IDENTITY,
--AnimalType VARCHAR(30) NOT NULL,
--)
--
--CREATE TABLE Cages
--(
--Id INT PRIMARY KEY IDENTITY,
--AnimalTypeId INT FOREIGN KEY REFERENCES AnimalTypes(Id) NOT NULL,
--)
--
--CREATE TABLE Animals
--(
--Id INT PRIMARY KEY IDENTITY,
--[Name] VARCHAR(30) NOT NULL,
--BirthDate DATE NOT NULL,
--OwnerId INT FOREIGN KEY REFERENCES Owners(Id),
--AnimalTypeId INT FOREIGN KEY REFERENCES AnimalTypes(Id) NOT NULL
--)
--
--CREATE TABLE AnimalsCages
--(
--CageId INT FOREIGN KEY REFERENCES Cages(Id) NOT NULL,
--AnimalId INT FOREIGN KEY REFERENCES Animals(Id) NOT NULL,
--PRIMARY KEY (CageId, AnimalId)
--)
--
--CREATE TABLE VolunteersDepartments
--(
--Id INT PRIMARY KEY IDENTITY,
--DepartmentName VARCHAR(30) NOT NULL
--)
--
--CREATE TABLE Volunteers
--(
--Id INT PRIMARY KEY IDENTITY,
--[Name] VARCHAR(50) NOT NULL,
--PhoneNumber VARCHAR(15) NOT NULL,
--[Address] VARCHAR(50),
--AnimalId INT FOREIGN KEY REFERENCES Animals(Id),
--DepartmentId INT FOREIGN KEY REFERENCES VolunteersDepartments(Id) NOT NULL
--)


02. Insert
--INSERT INTO Volunteers([Name], PhoneNumber, [Address], AnimalId, DepartmentId)
--     VALUES
--	      ('Anita Kostova',	'0896365412',	'Sofia, 5 Rosa str.',	15,	1),
--	      ('Dimitur Stoev',	'0877564223',	null,	42,	4),
--	      ('Kalina Evtimova',	'0896321112',	'Silistra, 21 Breza str.',	9,	7),
--	      ('Stoyan Tomov',	'0898564100',	'Montana, 1 Bor str.',	18,	8),
--	      ('Boryana Mileva',	'0888112233',	null,	31,	5)
--
--INSERT INTO Animals([Name], BirthDate, OwnerId, AnimalTypeId)
--     VALUES
--	      ('Giraffe',	'2018-09-21',	21,	1),
--	      ('Harpy Eagle',	'2015-04-17',	15,	3),
--	      ('Hamadryas Baboon',	'2017-11-02',	null,	1),
--	      ('Tuatara',	'2021-06-30',	2,	4)


03. Update
--UPDATE Animals
--   SET OwnerId = 4


04. Delete
--DELETE FROM Volunteers
-- WHERE DepartmentId = 2
--
--DELETE FROM VolunteersDepartments
-- WHERE DepartmentName = 'Education program assistant'


05. Volunteers
--SELECT v.Name, v.PhoneNumber, v.Address, v.AnimalId, v.DepartmentId
--  FROM Volunteers v
-- ORDER BY v.Name ASC, v.Id ASC, v.DepartmentId ASC


06. Animals data
--SELECT a.Name, at.AnimalType, FORMAT(a.BirthDate, 'dd.MM.yyyy')
--  FROM Animals a
--  JOIN AnimalTypes at ON at.Id = a.AnimalTypeId
-- ORDER BY a.Name ASC


07. Owners and their Animals
--SELECT TOP(5) o.Name, COUNT(a.OwnerId) AS CountOfAnimals
--  FROM Owners o
--  JOIN Animals a ON a.OwnerId = o.Id
-- WHERE o.Id = a.OwnerId
-- GROUP BY o.Name
-- ORDER BY CountOfAnimals DESC, o.Name


08. Owners, Animals and Cages
--SELECT o.Name + '-' + a.Name AS OwnersAnimals, o.PhoneNumber, c.Id
--  FROM Owners o
--  JOIN Animals a ON a.OwnerId = o.Id
--  JOIN AnimalsCages ac ON ac.AnimalId = a.Id
--  JOIN Cages c ON c.Id = ac.CageId
-- WHERE a.AnimalTypeId = 1
-- GROUP BY o.Name, a.Name, o.PhoneNumber, c.Id
-- ORDER BY o.Name, a.Name DESC


09. Volunteers in Sofia
--SELECT v.Name, 
--	     v.PhoneNumber, 
--	     SUBSTRING(v.Address, PATINDEX('%[0-9]%', v.Address), LEN(v.Address))
--  FROM Volunteers v
-- WHERE DepartmentId = 2
--   AND v.Address LIKE '%Sofia%'
-- ORDER BY v.Name ASC


10. Animals for Adoption
--SELECT a.Name, YEAR(a.BirthDate) AS BirthYear, at.AnimalType
--  FROM Animals a
--  JOIN AnimalTypes at ON at.Id = a.AnimalTypeId
-- WHERE a.OwnerId IS NULL
--   AND at.AnimalType != 'Birds' AND DATEDIFF(YEAR, a.BirthDate, '2022-01-01') < 5
-- ORDER BY a.Name


11. All Volunteers in a Department
-- CREATE FUNCTION udf_GetVolunteersCountFromADepartment (@VolunteersDepartment VARCHAR(50))
--RETURNS INT
--     AS
--  BEGIN
--DECLARE @result INT;
--    SET @result = (SELECT COUNT(*)
--   FROM VolunteersDepartments vd
--   JOIN Volunteers v ON v.DepartmentId = vd.Id
--  WHERE vd.DepartmentName = @VolunteersDepartment)
-- RETURN @result
--    END


12. Animals with Owner or Not
--CREATE PROCEDURE usp_AnimalsWithOwnersOrNot(@AnimalName VARCHAR(30))
--    AS
-- BEGIN
--	     SELECT a.Name,
--		 CASE 
--   	     WHEN a.OwnerId IS NULL THEN 'For adoption'
--   	     ELSE o.Name
--   END AS OwnersName
--  FROM Owners o
--  FULL JOIN Animals a ON a.OwnerId = o.Id
-- WHERE a.Name = @AnimalName
--   END






